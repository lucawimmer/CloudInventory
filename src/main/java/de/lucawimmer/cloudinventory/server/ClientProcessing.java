package de.lucawimmer.cloudinventory.server;

import com.google.gson.Gson;
import de.lucawimmer.cloudinventory.CloudInventory;
import de.lucawimmer.cloudinventory.objects.ServerInfo;
import de.lucawimmer.cloudinventory.storage.PufferStorage;
import org.bukkit.Bukkit;
import org.json.simple.JSONObject;

import javax.xml.bind.DatatypeConverter;
import java.io.*;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.net.SocketAddress;
import java.nio.file.Files;

public class ClientProcessing implements Runnable {

    private final Socket clientSocket;

    public ClientProcessing(Socket clientSocket) {
        this.clientSocket = clientSocket;
    }

    @Override
    public void run() {
        try {
            BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
            String s = null;
            while ((s = in.readLine()) != null) {
                ServerInfo playerinfo = new Gson().fromJson(s, ServerInfo.class);
                if (!playerinfo.getServer().equals(null)) {
                    Bukkit.getLogger().info("[CloudInventory] Got connection from " + playerinfo.getServer());
                }
                if (playerinfo.getPassword().equals(CloudInventory.getDefaultConfig().getString("communication-password"))) {
                    if (playerinfo.getHeader().equals("clientsync")) {
                        // WITHOUT PUFFER
                        try {
                            File playerfile = new File(Bukkit.getWorld("world").getWorldFolder(), "players/" + playerinfo.getPlayer() + ".dat");
                            if (!playerfile.exists()) playerfile.createNewFile();

                            BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(playerfile));
                            bos.write(DatatypeConverter.parseBase64Binary(playerinfo.getPlayerdata()));
                            bos.flush();
                            bos.close();

                            //Bukkit.getPlayer(playerinfo.getPlayer()).sendMessage("Daten synchronisiert.");
                            if (!CloudInventory.getDefaultConfig().getBoolean("enable-puffer")) {
                                Bukkit.getPlayer(playerinfo.getPlayer()).loadData();
                            }
                            Bukkit.getLogger().info("Playerdata of " + playerinfo.getPlayer() + " has been transfered.");
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    } else if (playerinfo.getHeader().equals("puffer; left;")) { //Spieler hat den Server verlassen => Eintrag in die Connection Liste

                        // TO PUFFER
                        String ip = playerinfo.getServer().split(":")[0];
                        Integer port = Integer.parseInt(playerinfo.getServer().split(":")[1]);
                        String password = playerinfo.getOwnpassword();
                        Bukkit.getLogger().info(ip + port.toString() + password);


                        JSONObject json = new JSONObject();
                        json.put("header", "server; transfer;");
                        json.put("password", password);
                        json.put("server", Bukkit.getServer().getIp() + ":" + CloudInventory.getDefaultConfig().getInt("port"));
                        json.put("player", playerinfo.getPlayer());
                        json.put("destination", playerinfo.getDestination());
                        //System.out.println("sending: " + json.toString());
                        SocketAddress address = new InetSocketAddress(ip, port);
                        Socket clientSocket = new Socket();
                        clientSocket.connect(address, 20000);
                        DataOutputStream outToServer = new DataOutputStream(clientSocket.getOutputStream());
                        //BufferedReader inFromServer = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
                        outToServer.writeBytes(json.toString());
                        clientSocket.close();
                        Bukkit.getLogger().info("Packet generated by " + playerinfo.getPlayer() + " has been sent to destination server.");
                        Bukkit.getLogger().info(json.toString());

                        PufferStorage.addConnectingPlayer(playerinfo.getPlayer(), playerinfo.getDestination());

                    } else if (playerinfo.getHeader().equals("server; transfer;")) {
                        // TO SERVER
                        Bukkit.getLogger().info(playerinfo.getHeader() + playerinfo.getPlayer() + playerinfo.getServer() + playerinfo.getPlayerip() + playerinfo.getOwnpassword() + playerinfo.getPassword());
                        try {
                            for (String ss : CloudInventory.getDefaultConfig().getStringList("servers")) {
                                String ip = ss.split(":")[0];
                                Integer port = Integer.parseInt(ss.split(":")[1]);
                                String password = ss.split(":")[2];
                                File file = new File(Bukkit.getWorld("world").getWorldFolder(), "players/" + playerinfo.getPlayer() + ".dat");
                                byte[] bytes = Files.readAllBytes(file.toPath());
                                JSONObject json = new JSONObject();
                                json.put("header", "clientsync");
                                json.put("password", password);
                                json.put("ownpassword", CloudInventory.getDefaultConfig().getString("communication-password"));
                                json.put("server", Bukkit.getServer().getIp() + ":" + CloudInventory.getDefaultConfig().getInt("port"));
                                json.put("player", playerinfo.getPlayer());
                                json.put("playerdata", DatatypeConverter.printBase64Binary(bytes));
                                json.put("destination", playerinfo.getDestination());
                                //System.out.println("sending: " + json.toString());
                                SocketAddress address = new InetSocketAddress(ip, port);
                                Socket clientSocket = new Socket();
                                clientSocket.connect(address, 20000);
                                DataOutputStream outToServer = new DataOutputStream(clientSocket.getOutputStream());
                                //BufferedReader inFromServer = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
                                outToServer.writeBytes(json.toString());
                                clientSocket.close();
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        Bukkit.getLogger().info("Packet generated by " + playerinfo.getPlayer() + " has been sent to all servers.");
                    }
                } else {
                    Bukkit.getLogger().info("Failed authentication from server " + playerinfo.getServer());
                }

            }
            in.close();
            clientSocket.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

