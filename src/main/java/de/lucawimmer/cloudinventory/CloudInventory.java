package de.lucawimmer.cloudinventory;

import com.google.common.io.ByteArrayDataOutput;
import com.google.common.io.ByteStreams;
import de.lucawimmer.cloudinventory.commands.FarmweltCommand;
import de.lucawimmer.cloudinventory.listener.BukkitListener;
import de.lucawimmer.cloudinventory.server.Server;
import de.lucawimmer.cloudinventory.storage.PufferStorage;
import de.lucawimmer.cloudinventory.utils.SimpleConfig;
import de.lucawimmer.cloudinventory.utils.SimpleConfigManager;
import org.bukkit.Bukkit;
import org.bukkit.plugin.java.JavaPlugin;
import org.bukkit.scheduler.BukkitRunnable;
import org.json.simple.JSONObject;

import javax.xml.bind.DatatypeConverter;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.net.*;
import java.nio.file.Files;
import java.util.Arrays;

public class CloudInventory extends JavaPlugin {

    /* Statische Variablen */

    // Config
    private static SimpleConfig CONFIG;
    private static JavaPlugin PLUGIN;
    private static Server SERVER = null;

    /* Globale Funktionen */

    // Config
    public static SimpleConfig getDefaultConfig() {
        return CONFIG;
    }

    public static JavaPlugin getInstance() {
        return PLUGIN;
    }

    /*-----------------------------------*/

    public static void ininiateConnection(final String p) throws IOException {
        if (!Bukkit.getOfflinePlayer(p).isOnline())
            return;

        final ByteArrayDataOutput out = ByteStreams.newDataOutput();

        new BukkitRunnable() {
            int seconds = 5;

            public void run() {
                if (seconds > -1) {
                    switch (seconds) {
                        case 5:
                            Bukkit.getPlayer(p).sendMessage("§7[§6H§7] §fDu wirst in 5 Sekunden auf den Farmwelt Server teleportiert.");
                            seconds--;

                            for (String s : CloudInventory.getDefaultConfig().getStringList("servers")) {
                                String ip = s.split(":")[0];
                                Integer port = Integer.parseInt(s.split(":")[1]);
                                String password = s.split(":")[2];

                                Bukkit.getPlayer(p).saveData();

                                File file = new File(Bukkit.getPlayer(p).getPlayer().getWorld().getWorldFolder(), "players/" + Bukkit.getPlayer(p).getPlayer().getName() + ".dat");
                                byte[] bytes = new byte[0];
                                try {
                                    bytes = Files.readAllBytes(file.toPath());
                                } catch (IOException e) {
                                    e.printStackTrace();
                                }

                                JSONObject json = new JSONObject();
                                json.put("password", password);
                                json.put("server", Bukkit.getServer().getIp());
                                json.put("player", Bukkit.getPlayer(p).getName());
                                json.put("playerip", Bukkit.getPlayer(p).getAddress().toString());
                                json.put("playerdata", DatatypeConverter.printBase64Binary(bytes));
                                SocketAddress address = new InetSocketAddress(ip, port);
                                Socket clientSocket = new Socket();
                                try {
                                    clientSocket.connect(address, 20000);
                                    DataOutputStream outToServer = new DataOutputStream(clientSocket.getOutputStream());
                                    outToServer.writeBytes(json.toString() + '\n');
                                    clientSocket.close();
                                    Bukkit.getLogger().info("Packet generated by " + Bukkit.getPlayer(p).getPlayer().getName() + " has been sent to all servers.");
                                } catch (IOException e) {
                                    e.printStackTrace();
                                }


                            }
                            break;
                        case 4:
                            Bukkit.getPlayer(p).sendMessage("§7[§6H§7] §fDu wirst in 4 Sekunden auf den Farmwelt Server teleportiert.");
                            seconds--;
                            break;
                        case 3:
                            Bukkit.getPlayer(p).sendMessage("§7[§6H§7] §fDu wirst in 3 Sekunden auf den Farmwelt Server teleportiert.");
                            seconds--;
                            break;
                        case 2:
                            Bukkit.getPlayer(p).sendMessage("§7[§6H§7] §fDu wirst in 2 Sekunden auf den Farmwelt Server teleportiert.");
                            seconds--;
                            break;
                        case 1:
                            Bukkit.getPlayer(p).sendMessage("§7[§6H§7] §fDu wirst in 1 Sekunden auf den Farmwelt Server teleportiert.");
                            seconds--;
                            break;
                        case 0:
                            try {
                                out.writeUTF("Connect");
                                out.writeUTF(CloudInventory.getDefaultConfig().getString("bungee-name"));
                                Bukkit.getPlayer(p).sendPluginMessage((CloudInventory.getInstance()), "BungeeCord", out.toByteArray());
                                cancel();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            break;
                    }
                }
            }
        }.runTaskTimer(getInstance(), 0, 20);

    }

    @Override
    public void onEnable() {
        PLUGIN = this;
        SimpleConfigManager manager = new SimpleConfigManager(this);
        String[] header = {"CloudInventory", "Developed and written by", "Luca Wimmer (magl1te)", "business@luca.bz"};
        CONFIG = manager.getNewConfig("config.yml", header);
        CONFIG.addDefault("enable-plugin", true, new String[]{"Should the plugin be enabled?"});
        try {
            CONFIG.addDefault("ip", InetAddress.getLocalHost().getHostAddress(), new String[]{"IP of this CloudInventory Server"});
        } catch (UnknownHostException ignored) {
        }
        CONFIG.addDefault("port", 2151, new String[]{"Port of this CloudInventory Server"});
        CONFIG.addDefault("communication-password", "pl3as3_ch@ng3_m3", new String[]{"Password for communication within the servers"});
        CONFIG.addDefault("bungee-name", "default", new String[]{"Name of the bungeecord server"});
        CONFIG.addDefault("servers", Arrays.asList("178.251.229.190:2152:pl3as3_ch@ng3_m3"));
        CONFIG.addDefault("enable-puffer", false, new String[]{"Enable a puffer server?"});
        CONFIG.addDefault("use-as-puffer", false, new String[]{"Do you want this server as puffer server?"});
        CONFIG.addDefault("puffer-server", Arrays.asList("178.251.229.190:2153:pl3as3_ch@ng3_m3:bungeename", new String[]{"If you use this as puffer server its unimportant"}));
        CONFIG.addDefault("default-forward-server", "default");
        CONFIG.saveConfig();
        try {
            SERVER = new Server(InetAddress.getByName(CONFIG.getString("ip")), CONFIG.getInt("port"));
            SERVER.start();
        } catch (UnknownHostException e) {
            e.printStackTrace();
        }

        if (CONFIG.getBoolean("use-as-puffer")) {
            PufferStorage.pufferClientProccessing();
        }

        Bukkit.getServer().getPluginManager().registerEvents(new BukkitListener(), this);
        getCommand("farmwelt").setExecutor(new FarmweltCommand());
        Bukkit.getMessenger().registerOutgoingPluginChannel(this, "BungeeCord");
    }

    public void onDisable() {
        try {
            SERVER.stop();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

}
